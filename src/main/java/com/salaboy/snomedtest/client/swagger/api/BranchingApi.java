/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.salaboy.snomedtest.client.swagger.api;

import com.salaboy.snomedtest.client.swagger.model.Branch;
import com.salaboy.snomedtest.client.swagger.model.BranchMergeJob;
import com.salaboy.snomedtest.client.swagger.model.BranchReview;
import com.salaboy.snomedtest.client.swagger.model.BranchReviewConceptChanges;
import com.salaboy.snomedtest.client.swagger.model.CollectionMergeReviewConceptVersions;
import com.salaboy.snomedtest.client.swagger.model.Concept;
import com.salaboy.snomedtest.client.swagger.model.CreateBranchRequest;
import com.salaboy.snomedtest.client.swagger.model.CreateReviewRequest;
import com.salaboy.snomedtest.client.swagger.model.IntegrityIssueReport;
import com.salaboy.snomedtest.client.swagger.model.MergeRequest;
import com.salaboy.snomedtest.client.swagger.model.MergeReview;
import com.salaboy.snomedtest.client.swagger.model.UpdateBranchRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-20T12:04:47.405-03:00")

@Api(value = "Branching", description = "the Branching API")
public interface BranchingApi {

    @ApiOperation(value = "applyMergeReview", nickname = "applyMergeReviewUsingPOST", notes = "", tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/merge-reviews/{id}/apply",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<Void> applyMergeReviewUsingPOST(@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "createBranchReview", nickname = "createBranchReviewUsingPOST", notes = "", tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/reviews",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> createBranchReviewUsingPOST(@ApiParam(value = "createReviewRequest" ,required=true )  @Valid @RequestBody CreateReviewRequest createReviewRequest);


    @ApiOperation(value = "createBranch", nickname = "createBranchUsingPOST", notes = "", response = Branch.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Branch.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/branches",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Branch> createBranchUsingPOST(@ApiParam(value = "request" ,required=true )  @Valid @RequestBody CreateBranchRequest request);


    @ApiOperation(value = "createMergeReview", nickname = "createMergeReviewUsingPOST", notes = "", tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/merge-reviews",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> createMergeReviewUsingPOST(@ApiParam(value = "createReviewRequest" ,required=true )  @Valid @RequestBody CreateReviewRequest createReviewRequest);


    @ApiOperation(value = "Perform integrity check against all components on this branch.", nickname = "fullIntegrityCheckUsingPOST", notes = "Returns a report containing an entry for each type of issue found together with a map of components. In the component map each key represents an existing component and the corresponding map value is the id of a component which is missing or inactive.", response = IntegrityIssueReport.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IntegrityIssueReport.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/integrity-check-full",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<IntegrityIssueReport> fullIntegrityCheckUsingPOST(@ApiParam(value = "The branch path",required=true) @PathVariable("branch") String branch);


    @ApiOperation(value = "getBranchReviewConceptChanges", nickname = "getBranchReviewConceptChangesUsingGET", notes = "", response = BranchReviewConceptChanges.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BranchReviewConceptChanges.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/reviews/{id}/concept-changes",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<BranchReviewConceptChanges> getBranchReviewConceptChangesUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "getBranchReview", nickname = "getBranchReviewUsingGET", notes = "", response = BranchReview.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BranchReview.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/reviews/{id}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<BranchReview> getBranchReviewUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "getMergeReviewConflictingConcepts", nickname = "getMergeReviewConflictingConceptsUsingGET", notes = "", response = CollectionMergeReviewConceptVersions.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CollectionMergeReviewConceptVersions.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/merge-reviews/{id}/details",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<CollectionMergeReviewConceptVersions> getMergeReviewConflictingConceptsUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") String id,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);


    @ApiOperation(value = "getMergeReviewConflictingConcepts", nickname = "getMergeReviewConflictingConceptsUsingPOST", notes = "", tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/merge-reviews/{id}/{conceptId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> getMergeReviewConflictingConceptsUsingPOST(@ApiParam(value = "id",required=true) @PathVariable("id") String id,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "manuallyMergedConcept" ,required=true )  @Valid @RequestBody Concept manuallyMergedConcept);


    @ApiOperation(value = "getMergeReview", nickname = "getMergeReviewUsingGET", notes = "", response = MergeReview.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MergeReview.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/merge-reviews/{id}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<MergeReview> getMergeReviewUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Perform integrity check against changed components on this branch.", nickname = "integrityCheckUsingPOST", notes = "Returns a report containing an entry for each type of issue found together with a map of components. In the component map each key represents an existing component and the corresponding map value is the id of a component which is missing or inactive.", response = IntegrityIssueReport.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IntegrityIssueReport.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/integrity-check",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<IntegrityIssueReport> integrityCheckUsingPOST(@ApiParam(value = "The branch path",required=true) @PathVariable("branch") String branch);


    @ApiOperation(value = "Perform a branch rebase or promotion.", nickname = "mergeBranchUsingPOST", notes = "The integrity-check endpoint should be used before performing a promotion to avoid a promotion errors.", tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/merges",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> mergeBranchUsingPOST(@ApiParam(value = "mergeRequest" ,required=true )  @Valid @RequestBody MergeRequest mergeRequest);


    @ApiOperation(value = "Retrieve all branches", nickname = "retrieveAllBranchesUsingGET", notes = "", response = Branch.class, responseContainer = "List", tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Branch.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/branches",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<List<Branch>> retrieveAllBranchesUsingGET();


    @ApiOperation(value = "Retrieve a single branch", nickname = "retrieveBranchUsingGET", notes = "", response = Branch.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Branch.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/branches/{path}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Branch> retrieveBranchUsingGET(@ApiParam(value = "path",required=true) @PathVariable("path") String path,@ApiParam(value = "includeInheritedMetadata", defaultValue = "false") @Valid @RequestParam(value = "includeInheritedMetadata", required = false, defaultValue="false") Boolean includeInheritedMetadata);


    @ApiOperation(value = "retrieveMerge", nickname = "retrieveMergeUsingGET", notes = "", response = BranchMergeJob.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BranchMergeJob.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/merges/{mergeId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<BranchMergeJob> retrieveMergeUsingGET(@ApiParam(value = "mergeId",required=true) @PathVariable("mergeId") String mergeId);


    @ApiOperation(value = "unlockBranch", nickname = "unlockBranchUsingPOST", notes = "", tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/branches/{path}/actions/unlock",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<Void> unlockBranchUsingPOST(@ApiParam(value = "path",required=true) @PathVariable("path") String path);


    @ApiOperation(value = "Update branch metadata", nickname = "updateBranchUsingPUT", notes = "", response = Branch.class, tags={ "Branching", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Branch.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/branches/{path}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Branch> updateBranchUsingPUT(@ApiParam(value = "path",required=true) @PathVariable("path") String path,@ApiParam(value = "request" ,required=true )  @Valid @RequestBody UpdateBranchRequest request);

}
