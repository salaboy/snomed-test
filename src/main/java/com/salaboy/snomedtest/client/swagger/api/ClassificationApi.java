/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.salaboy.snomedtest.client.swagger.api;

import com.salaboy.snomedtest.client.swagger.model.Classification;
import com.salaboy.snomedtest.client.swagger.model.ClassificationUpdateRequest;
import com.salaboy.snomedtest.client.swagger.model.ConceptView;
import com.salaboy.snomedtest.client.swagger.model.ItemsPageClassification;
import com.salaboy.snomedtest.client.swagger.model.ItemsPageEquivalentConceptsResponse;
import com.salaboy.snomedtest.client.swagger.model.ItemsPageRelationshipChange;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-20T12:04:47.405-03:00")

@Api(value = "Classification", description = "the Classification API")
public interface ClassificationApi {

    @ApiOperation(value = "Create a classification on a branch", nickname = "createClassificationUsingPOST", notes = "", response = ResponseEntity.class, tags={ "Classification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/classifications",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<ResponseEntity> createClassificationUsingPOST(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "reasonerId", defaultValue = "org.semanticweb.elk.owlapi.ElkReasonerFactory") @Valid @RequestParam(value = "reasonerId", required = false, defaultValue="org.semanticweb.elk.owlapi.ElkReasonerFactory") String reasonerId);


    @ApiOperation(value = "Retrieve a classification on a branch", nickname = "findClassificationUsingGET", notes = "", response = Classification.class, tags={ "Classification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Classification.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/classifications/{classificationId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Classification> findClassificationUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "classificationId",required=true) @PathVariable("classificationId") String classificationId);


    @ApiOperation(value = "Retrieve classifications on a branch", nickname = "findClassificationsUsingGET", notes = "", response = ItemsPageClassification.class, tags={ "Classification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemsPageClassification.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/classifications",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ItemsPageClassification> findClassificationsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch);


    @ApiOperation(value = "Retrieve a preview of a concept with classification changes applied", nickname = "getConceptPreviewUsingGET", notes = "", response = ConceptView.class, tags={ "Classification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ConceptView.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/classifications/{classificationId}/concept-preview/{conceptId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ConceptView> getConceptPreviewUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "classificationId",required=true) @PathVariable("classificationId") String classificationId,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);


    @ApiOperation(value = "Retrieve equivalent concepts from a classification run on a branch", nickname = "getEquivalentConceptsUsingGET", notes = "", response = ItemsPageEquivalentConceptsResponse.class, tags={ "Classification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemsPageEquivalentConceptsResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/classifications/{classificationId}/equivalent-concepts",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ItemsPageEquivalentConceptsResponse> getEquivalentConceptsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "classificationId",required=true) @PathVariable("classificationId") String classificationId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage,@ApiParam(value = "offset", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "limit", defaultValue = "1000") @Valid @RequestParam(value = "limit", required = false, defaultValue="1000") Integer limit);


    @ApiOperation(value = "Retrieve relationship changes made by a classification run on a branch", nickname = "getRelationshipChangesUsingGET", notes = "", response = ItemsPageRelationshipChange.class, tags={ "Classification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemsPageRelationshipChange.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/classifications/{classificationId}/relationship-changes",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ItemsPageRelationshipChange> getRelationshipChangesUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "classificationId",required=true) @PathVariable("classificationId") String classificationId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage,@ApiParam(value = "offset", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "limit", defaultValue = "1000") @Valid @RequestParam(value = "limit", required = false, defaultValue="1000") Integer limit);


    @ApiOperation(value = "Update a classification on a branch.", nickname = "updateClassificationUsingPUT", notes = "Update the specified classification run by changing its state property. Saving the results is an async operation due to the possible high number of changes. It is advised to fetch the state of the classification run until the state changes to 'SAVED' or 'SAVE_FAILED'. Currently only the state can be changed from 'COMPLETED' to 'SAVED'.", tags={ "Classification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/classifications/{classificationId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateClassificationUsingPUT(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "classificationId",required=true) @PathVariable("classificationId") String classificationId,@ApiParam(value = "updateRequest" ,required=true )  @Valid @RequestBody ClassificationUpdateRequest updateRequest);

}
