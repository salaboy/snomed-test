/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.salaboy.snomedtest.client.swagger.api;

import com.salaboy.snomedtest.client.swagger.model.AsyncConceptChangeBatch;
import com.salaboy.snomedtest.client.swagger.model.CollectionConcept;
import com.salaboy.snomedtest.client.swagger.model.CollectionConceptMini;
import com.salaboy.snomedtest.client.swagger.model.ConceptDescriptionsResult;
import com.salaboy.snomedtest.client.swagger.model.ConceptIdsPojo;
import com.salaboy.snomedtest.client.swagger.model.ConceptSearchRequest;
import com.salaboy.snomedtest.client.swagger.model.ConceptView;
import com.salaboy.snomedtest.client.swagger.model.Expression;
import com.salaboy.snomedtest.client.swagger.model.InboundRelationshipsResult;
import com.salaboy.snomedtest.client.swagger.model.ItemsPageConceptMini;
import java.util.List;
import com.salaboy.snomedtest.client.swagger.model.PageConceptView;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-20T12:04:47.405-03:00")

@Api(value = "Concepts", description = "the Concepts API")
public interface ConceptsApi {

    @ApiOperation(value = "Start a bulk concept change.", nickname = "createConceptBulkChangeUsingPOST", notes = "Concepts can be created or updated using this endpoint.", response = ResponseEntity.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts/bulk",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<ResponseEntity> createConceptBulkChangeUsingPOST(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "concepts" ,required=true )  @Valid @RequestBody List<ConceptView> concepts);


    @ApiOperation(value = "createConcept", nickname = "createConceptUsingPOST", notes = "", response = ConceptView.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ConceptView.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<ConceptView> createConceptUsingPOST(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "concept" ,required=true )  @Valid @RequestBody ConceptView concept,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);


    @ApiOperation(value = "deleteConcept", nickname = "deleteConceptUsingDELETE", notes = "", tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/{branch}/concepts/{conceptId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteConceptUsingDELETE(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId);


    @ApiOperation(value = "findConceptAncestors", nickname = "findConceptAncestorsUsingGET", notes = "", response = CollectionConceptMini.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CollectionConceptMini.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts/{conceptId}/ancestors",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<CollectionConceptMini> findConceptAncestorsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage,@ApiParam(value = "form", allowableValues = "inferred, stated, additional", defaultValue = "inferred") @Valid @RequestParam(value = "form", required = false, defaultValue="inferred") String form);


    @ApiOperation(value = "findConceptChildren", nickname = "findConceptChildrenUsingGET", notes = "", response = CollectionConceptMini.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CollectionConceptMini.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts/{conceptId}/children",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<CollectionConceptMini> findConceptChildrenUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage,@ApiParam(value = "form", allowableValues = "inferred, stated, additional", defaultValue = "inferred") @Valid @RequestParam(value = "form", required = false, defaultValue="inferred") String form);


    @ApiOperation(value = "findConceptDescendants", nickname = "findConceptDescendantsUsingGET", notes = "", response = ItemsPageConceptMini.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemsPageConceptMini.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/concepts/{conceptId}/descendants",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ItemsPageConceptMini> findConceptDescendantsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage,@ApiParam(value = "stated", defaultValue = "false") @Valid @RequestParam(value = "stated", required = false, defaultValue="false") Boolean stated,@ApiParam(value = "offset", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "limit", defaultValue = "50") @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Integer limit);


    @ApiOperation(value = "findConceptDescriptions", nickname = "findConceptDescriptionsUsingGET", notes = "", response = ConceptDescriptionsResult.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ConceptDescriptionsResult.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/concepts/{conceptId}/descriptions",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ConceptDescriptionsResult> findConceptDescriptionsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);


    @ApiOperation(value = "findConceptInboundRelationships", nickname = "findConceptInboundRelationshipsUsingGET", notes = "", response = InboundRelationshipsResult.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = InboundRelationshipsResult.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/concepts/{conceptId}/inbound-relationships",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<InboundRelationshipsResult> findConceptInboundRelationshipsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId);


    @ApiOperation(value = "findConceptParents", nickname = "findConceptParentsUsingGET", notes = "", response = CollectionConceptMini.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CollectionConceptMini.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts/{conceptId}/parents",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<CollectionConceptMini> findConceptParentsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage,@ApiParam(value = "form", allowableValues = "inferred, stated, additional", defaultValue = "inferred") @Valid @RequestParam(value = "form", required = false, defaultValue="inferred") String form);


    @ApiOperation(value = "findConcept", nickname = "findConceptUsingGET", notes = "", response = ConceptView.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ConceptView.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts/{conceptId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ConceptView> findConceptUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);


    @ApiOperation(value = "findConcepts", nickname = "findConceptsUsingGET", notes = "", response = ItemsPageConceptMini.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemsPageConceptMini.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/concepts",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<ItemsPageConceptMini> findConceptsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage,@ApiParam(value = "activeFilter") @Valid @RequestParam(value = "activeFilter", required = false) Boolean activeFilter,@ApiParam(value = "term") @Valid @RequestParam(value = "term", required = false) String term,@ApiParam(value = "ecl") @Valid @RequestParam(value = "ecl", required = false) String ecl,@ApiParam(value = "statedEcl") @Valid @RequestParam(value = "statedEcl", required = false) String statedEcl,@ApiParam(value = "escg") @Valid @RequestParam(value = "escg", required = false) String escg,@ApiParam(value = "conceptIds") @Valid @RequestParam(value = "conceptIds", required = false) List<String> conceptIds,@ApiParam(value = "offset", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "limit", defaultValue = "50") @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Integer limit);


    @ApiOperation(value = "getBrowserConcepts", nickname = "getBrowserConceptsUsingGET", notes = "", response = PageConceptView.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PageConceptView.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<PageConceptView> getBrowserConceptsUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage,@ApiParam(value = "number", defaultValue = "0") @Valid @RequestParam(value = "number", required = false, defaultValue="0") Integer number,@ApiParam(value = "size", defaultValue = "100") @Valid @RequestParam(value = "size", required = false, defaultValue="100") Integer size);


    @ApiOperation(value = "getBrowserConcepts", nickname = "getBrowserConceptsUsingPOST", notes = "", response = CollectionConcept.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CollectionConcept.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts/bulk-load",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CollectionConcept> getBrowserConceptsUsingPOST(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "request" ,required=true )  @Valid @RequestBody ConceptIdsPojo request,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);


    @ApiOperation(value = "getConceptAuthoringForm", nickname = "getConceptAuthoringFormUsingGET", notes = "", response = Expression.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Expression.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/concepts/{conceptId}/authoring-form",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<Expression> getConceptAuthoringFormUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);


    @ApiOperation(value = "Fetch the status of a bulk concept creation or update.", nickname = "getConceptBulkChangeUsingGET", notes = "", response = AsyncConceptChangeBatch.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AsyncConceptChangeBatch.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts/bulk/{bulkChangeId}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.GET)
    ResponseEntity<AsyncConceptChangeBatch> getConceptBulkChangeUsingGET(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "bulkChangeId",required=true) @PathVariable("bulkChangeId") String bulkChangeId);


    @ApiOperation(value = "rebuildBranchTransitiveClosure", nickname = "rebuildBranchTransitiveClosureUsingPOST", notes = "", tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/rebuild/{branch}",
        produces = "application/json", 
        consumes = "",
        method = RequestMethod.POST)
    ResponseEntity<Void> rebuildBranchTransitiveClosureUsingPOST(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch);


    @ApiOperation(value = "search", nickname = "searchUsingPOST", notes = "", response = ItemsPageConceptMini.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ItemsPageConceptMini.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/{branch}/concepts/search",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<ItemsPageConceptMini> searchUsingPOST(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "searchRequest" ,required=true )  @Valid @RequestBody ConceptSearchRequest searchRequest,@ApiParam(value = "Accept-Language" ,required=true) @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);


    @ApiOperation(value = "updateConcept", nickname = "updateConceptUsingPUT", notes = "", response = ConceptView.class, tags={ "Concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ConceptView.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/browser/{branch}/concepts/{conceptId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<ConceptView> updateConceptUsingPUT(@ApiParam(value = "branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "conceptId",required=true) @PathVariable("conceptId") String conceptId,@ApiParam(value = "concept" ,required=true )  @Valid @RequestBody ConceptView concept,@ApiParam(value = "Accept-Language" ,required=true, defaultValue="en-US;q=0.8,en-GB;q=0.6") @RequestHeader(value="Accept-Language", required=true) String acceptLanguage);

}
